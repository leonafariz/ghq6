{
  "name": "ghq B",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.pesan }}",
        "options": {
          "systemMessage": "=You are Libria AI ‚Äî a cheerful, enthusiastic, and energetic digital library assistant! Your job is to help returning users log in.\n\n‚ö†Ô∏è ALWAYS reply in EXACTLY this JSON format, with NO text outside:\n{\n\"nama\": \"\",\n\"email\": \"\",\n\"status\\_login\": \"\",\n\"respond\": \"\"\n}\n\nüìå RESPONSE LOGIC:\n\n1. **If the user just greets like ‚Äúhi‚Äù, ‚Äúhello‚Äù, etc.**\n\n   * `nama` and `email` should be empty\n   * `status_login`: \"gagal\"\n   * `respond`: Greet the user joyfully üéâ, introduce yourself, and ask for their name + email so you can help them log in, * always use English for \"respond\"*. \n\n2. **If the user provides full name & email that match:**\n\n   * {{ \\$json.nama\\_terdaftar.toJsonString() }}\n   * {{ \\$json.email\\_terdaftar.toJsonString() }}\n     Then:\n   * `status_login`: \"berhasil\"\n   * `respond`: Give a loud, cheerful welcome back and invite them to explore the books.\n\n3. **If the name and/or email do not match:**\n\n   * `status_login`: \"gagal\"\n   * `respond`: Stay cheerful! Ask the user to double-check. If it's the second failed attempt, add a suggestion to register using the button at the top right.\n\n4. **If only one field is filled (e.g. name only):**\n\n   * `status_login`: \"gagal\"\n   * `respond`: Encourage the user to provide the missing data, remain excited.\n\n5. **All `status_login` values MUST be either \"berhasil\" or \"gagal\".**\n\n6. **NO text is allowed outside the JSON.**\n\n7. **DO NOT use \\`\\`\\`json or any other markdown wrapper.**\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        784,
        16
      ],
      "id": "b1c8024d-77ad-42c4-b60f-b72dcc89622a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        784,
        224
      ],
      "id": "f9b6ca58-5d13-406c-9064-3f60337d7dc1",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tDj2EjR3OZcLDGnp",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "logeenhq6",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        336,
        16
      ],
      "id": "623b9071-604b-4495-8bfc-37a2bb8a840d",
      "name": "Webhook",
      "webhookId": "84b2cb59-e1a2-4264-bea7-5a6a5583aaac"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1440,
        112
      ],
      "id": "2af6495f-401a-419c-9437-1c56a5647ed5",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "const outputStr = $json[\"output\"];  // string JSON yang dikutip dengan escape\n\n// Bersihkan ```json dan ``` jika ada\nconst noFencing = outputStr\n  .replace(/```json/g, '')\n  .replace(/```/g, '')\n  .trim();\n\ntry {\n  const cleaned = JSON.parse(noFencing); // pertama: parse dari string escape jadi string JSON mentah\n  const parsed = typeof cleaned === \"string\" ? JSON.parse(cleaned) : cleaned; // kedua: parse jika masih string\n  return [{ json: parsed }];\n} catch (err) {\n  return [{\n    json: {\n      error: \"Invalid JSON\",\n      raw: outputStr,\n      cleaned: noFencing,\n      message: err.message\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        16
      ],
      "id": "b58bddbb-71e3-4911-82e3-5ee3ec816688",
      "name": "Code"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9332f725-c482-4a59-bd7b-52cb5b472191",
              "leftValue": "={{ $json.status_login }}",
              "rightValue": "berhasil",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1248,
        -32
      ],
      "id": "371476a6-671d-431d-82ee-51f25b79a4af",
      "name": "If"
    },
    {
      "parameters": {
        "tableId": "login_logs",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "nama",
              "fieldValue": "={{ $json.nama }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $json.email }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1440,
        -96
      ],
      "id": "8ea5a6ca-34ea-4a99-b857-92d94d46a382",
      "name": "Create a row",
      "credentials": {
        "supabaseApi": {
          "id": "bQW7R9mjRx9vPjPF",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.headers }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        912,
        208
      ],
      "id": "4f3576d3-7e26-489c-a932-c48c1a36f00f",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "pendaftaran",
        "returnAll": true,
        "filterType": "none"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        496,
        16
      ],
      "id": "a9721775-4be3-4340-9323-19aba9a40834",
      "name": "Get many rows",
      "credentials": {
        "supabaseApi": {
          "id": "bQW7R9mjRx9vPjPF",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "nama",
              "renameField": true,
              "outputFieldName": "nama_terdaftar"
            },
            {
              "fieldToAggregate": "email",
              "renameField": true,
              "outputFieldName": "email_terdaftar"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        656,
        16
      ],
      "id": "454103fa-a235-444b-96e0-974f93bcff4c",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status_login\": \"berhasil\",\n  \"respond\": \"Horeee! Login kamu berhasil! üöÄ\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1648,
        -96
      ],
      "id": "9ff5b555-4922-4e8d-8e69-869a2bb0889f",
      "name": "Respond to Webhook1"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get many rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get many rows": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8055bc9c-7aac-4b9d-8ede-05206bd07745",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9e547c68c8d99974ca85452a0465f5e4c27dcbb57241ac95e7fe8a70bd991b72"
  },
  "id": "OyLMhRQdHVyTaPMa",
  "tags": []
}